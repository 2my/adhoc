import static com.npspot.npsia.test.util.NpDateUtil.*;import static org.hamcrest.Matchers.*;import static org.hamcrest.MatcherAssert.*;import static org.mockito.Mockito.*;    	when( ftpService.read( CONNECTION, file ) ).thenThrow( e );// failure first, then successwhen(mock.someMethod("some arg"))   .thenThrow(new RuntimeException())  .thenReturn("foo");    	InOrder inOrder = inOrder( statusHolder );    	inOrder.verify( statusHolder, times(1) ).isBad( CONFIG_1, e );    	inOrder.verify( statusHolder, times(1) ).isOK( CONFIG_2 );   List:   contains : same order, same size   containsInAnyOrder : same order   hasItems : any order, different size	// Logging Answer or Modding input -----------------------------------------------	doAnswer( new LogCall() ).when( dao ).store( anyString(), anyDouble(), Mockito.any( Date.class ) );	private class LogCall implements Answer<Object> {		@Override public Object answer(InvocationOnMock invocation) {			Object[] args = invocation.getArguments();			sb.append( "store( " 					+ (String) args[0] + ", " 					+ (Double) args[1] + ", "					+ ((Date) args[2]).getTime()				+ ")"			);			return null;		}	};	// ArgumentCaptor ------------------------------------------------------------	ArgumentCaptor<String> strArg = ArgumentCaptor.forClass( String.class );	verify( task ).doTask( strArg.capture() );	assertThat( attributes.getValue(), equalTo( "whatever" ) );	// TypeSafeMatcher ------------------------------------------------------------	@Factory static <T> Matcher<String> match( final String expectedValue ) {		return new TypeSafeMatcher<String>() {			@Override public boolean matchesSafely( String actual ) {				return expectedValue.equals( actual );			}			public void describeTo(Description description) {				description.appendValueList( "String[", ", ", "]", expectedValue );			}		};	}**************** JSON ****************	/** print large object as json */	static String dumpJson( Object o ) {		ObjectMapper mapper = new ObjectMapper();    SimpleModule testModule = new SimpleModule("MyModule", new Version(1, 0, 0, null));    testModule.addSerializer( NpDate.class,    		new JsonSerializer<NpDate>() {    			@Override public void serialize( NpDate value, JsonGenerator jgen, SerializerProvider provider ) throws IOException, JsonProcessingException {    				jgen.writeString( value.toString() );    			}				}  		);    mapper.registerModule(testModule);    try {    	return mapper.writerWithDefaultPrettyPrinter().writeValueAsString( o );		} catch ( Exception e ) {			throw new RuntimeException( "ERROR DUMPING " + o );		}	}		<dependency>			<groupId>org.codehaus.jackson</groupId>			<artifactId>jackson-core-asl</artifactId>			<version>1.9.13</version>			<!-- <scope>test</scope> -->		</dependency>		<dependency>			<groupId>org.codehaus.jackson</groupId>			<artifactId>jackson-mapper-asl</artifactId>			<version>1.9.13</version>			<!-- <scope>test</scope> -->		</dependency>